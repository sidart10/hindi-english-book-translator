#!/usr/bin/env python3
"""
Test script for the Main Controller
Demonstrates the batch processing and integration capabilities
"""

import asyncio
import os
import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from main_controller import BookTranslationController


async def test_main_controller():
    """Test the main controller with a sample Hindi text"""
    
    print("=" * 70)
    print("ЁЯзк TESTING MAIN CONTROLLER - HINDI TO ENGLISH TRANSLATION")
    print("=" * 70)
    
    # Create test input file
    test_input = "test_hindi_book.txt"
    test_output = "test_english_translation.docx"
    
    # Sample Hindi text from various sources
    hindi_text = """рдкреНрд░рд╕реНрддрд╛рд╡рдирд╛

рдпрд╣ рдПрдХ рдкрд░реАрдХреНрд╖рдг рдкреБрд╕реНрддрдХ рд╣реИ рдЬреЛ рд╣рд┐рдВрджреА рд╕реЗ рдЕрдВрдЧреНрд░реЗрдЬреА рдЕрдиреБрд╡рд╛рдж рдХреА рдХреНрд╖рдорддрд╛ рдХреЛ рдкреНрд░рджрд░реНрд╢рд┐рдд рдХрд░рддреА рд╣реИред

рдЕрдзреНрдпрд╛рдп рез - рдкрд░рд┐рдЪрдп

рднрд╛рд░рдд рдПрдХ рд╡рд┐рд╡рд┐рдзрддрд╛рдкреВрд░реНрдг рджреЗрд╢ рд╣реИред рдпрд╣рд╛рдБ рд╡рд┐рднрд┐рдиреНрди рднрд╛рд╖рд╛рдПрдВ, рд╕рдВрд╕реНрдХреГрддрд┐рдпрд╛рдВ рдФрд░ рдкрд░рдВрдкрд░рд╛рдПрдВ рд╣реИрдВред рд╣рд┐рдВрджреА рднрд╛рд░рдд рдХреА рд░рд╛рд╖реНрдЯреНрд░рднрд╛рд╖рд╛ рд╣реИ рдФрд░ рдХрд░реЛрдбрд╝реЛрдВ рд▓реЛрдЧ рдЗрд╕реЗ рдмреЛрд▓рддреЗ рд╣реИрдВред

рдЗрд╕ рдкреНрд░рдгрд╛рд▓реА рдХрд╛ рдЙрджреНрджреЗрд╢реНрдп рд╣рд┐рдВрджреА рдкреБрд╕реНрддрдХреЛрдВ рдХреЛ рдЕрдВрдЧреНрд░реЗрдЬреА рдореЗрдВ рдЕрдиреБрд╡рд╛рдж рдХрд░рдирд╛ рд╣реИ рддрд╛рдХрд┐ рд╡реЗ рд╡реИрд╢реНрд╡рд┐рдХ рджрд░реНрд╢рдХреЛрдВ рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХреЗрдВред рдпрд╣ Google Cloud Translation API рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддрд╛ рд╣реИред

рдЕрдзреНрдпрд╛рдп реи - рддрдХрдиреАрдХреА рд╡рд┐рд╡рд░рдг

рдпрд╣ рдкреНрд░рдгрд╛рд▓реА рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╕реБрд╡рд┐рдзрд╛рдПрдВ рдкреНрд░рджрд╛рди рдХрд░рддреА рд╣реИ:
- рдмреИрдЪ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдХреЗ рд╕рд╛рде рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдЕрдиреБрд╡рд╛рдж
- рд▓рд╛рдЧрдд рдЯреНрд░реИрдХрд┐рдВрдЧ рдФрд░ рдмрдЬрдЯ рдЪреЗрддрд╛рд╡рдиреА
- рдЧреБрдгрд╡рддреНрддрд╛ рдЖрд╢реНрд╡рд╛рд╕рди рдЬрд╛рдВрдЪ
- DOCX рдЖрдЙрдЯрдкреБрдЯ рдЬреЗрдирд░реЗрд╢рди

рдкреНрд░рддреНрдпреЗрдХ рд╡рд╛рдХреНрдп рдХреЛ рд╕рд╛рд╡рдзрд╛рдиреАрдкреВрд░реНрд╡рдХ рдЕрдиреБрд╡рд╛рджрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред рд╕рд┐рд╕реНрдЯрдо рдкреГрд╖реНрда рд╕рдВрд░рдЪрдирд╛ рдХреЛ рдмрдирд╛рдП рд░рдЦрддрд╛ рд╣реИред

рд╕рдорд╛рдкрди

рдпрд╣ рдкрд░реАрдХреНрд╖рдг рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреНрд░рджрд░реНрд╢рд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рд╕рд┐рд╕реНрдЯрдо рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред"""
    
    # Write test file
    with open(test_input, 'w', encoding='utf-8') as f:
        f.write(hindi_text)
    
    print(f"\nЁЯУЭ Created test input file: {test_input}")
    print(f"   Characters: {len(hindi_text)}")
    print(f"   Estimated cost: ${(len(hindi_text) / 1000) * 0.20:.4f}")
    
    try:
        # Initialize controller
        print("\nЁЯЪА Initializing Main Controller...")
        controller = BookTranslationController("config.json")
        
        # Run translation
        print("\nЁЯУЪ Starting translation process...")
        results = await controller.translate_book(
            test_input,
            test_output,
            project_id="demo_test"
        )
        
        # Display results
        print("\n" + "=" * 70)
        print("ЁЯУК TRANSLATION RESULTS")
        print("=" * 70)
        print(f"тЬЕ Total Sentences: {results['statistics']['total_sentences']}")
        print(f"тЬЕ Translated: {results['statistics']['translated_sentences']}")
        print(f"тЬЕ Characters: {results['statistics']['total_characters']:,}")
        print(f"тЬЕ Total Cost: ${results['statistics']['total_cost']:.4f}")
        
        if results['statistics']['errors']:
            print(f"\nтЪая╕П  Errors encountered:")
            for error in results['statistics']['errors']:
                print(f"   - {error}")
        
        print(f"\nЁЯУД Output saved to: {test_output}")
        
        # Show sample translation (if available)
        if Path(test_output).exists():
            print(f"   File size: {Path(test_output).stat().st_size:,} bytes")
        
    except Exception as e:
        print(f"\nтЭМ Error during test: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Clean up
        if Path(test_input).exists():
            os.remove(test_input)
            print(f"\nЁЯз╣ Cleaned up test input file")
    
    print("\n" + "=" * 70)
    print("Test complete!")


if __name__ == "__main__":
    # Set Google credentials if not already set
    if not os.environ.get("GOOGLE_APPLICATION_CREDENTIALS"):
        service_account_path = Path("service-account.json")
        if service_account_path.exists():
            os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = str(service_account_path.absolute())
            print(f"тЬЕ Set Google credentials: {service_account_path}")
        else:
            print("тЪая╕П  Warning: service-account.json not found")
    
    # Run the test
    asyncio.run(test_main_controller()) 